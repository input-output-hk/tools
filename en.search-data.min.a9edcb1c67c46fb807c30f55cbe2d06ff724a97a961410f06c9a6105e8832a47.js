'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/tools/docs/cross-compiler-test-suite/','title':"Cross Compiler Test Suite",'content':""});index.add({'id':1,'href':'/tools/docs/extensible-interface-files/','title':"Extensible Interface Files",'content':""});index.add({'id':2,'href':'/tools/docs/ghcjs-foreign-export/','title':"Ghcjs Foreign Export",'content':""});index.add({'id':3,'href':'/tools/docs/haskell-nix/','title':"Haskell Nix",'content':""});index.add({'id':4,'href':'/tools/docs/plutus-devcontainer/','title':"Plutus Devcontainer",'content':"Plutus Development Container "});index.add({'id':5,'href':'/tools/docs/rust-cross-compilation/','title':"Rust Cross Compilation",'content':"Rust Cross Compilation Rust\u0026ndash;by virtue of being a LLVM based compiler\u0026ndash;obtains most of the necessary infrastructure to be multiple target aware out of the box. However building rust in CI (especially in a nix based CI) can lead to compliations. This is very visible when trying to cross compile to Windows.\nWe\u0026rsquo;ve adopted an existing cargo wrapper for nix called naersk, and extended it to cover cross compilation and subsequently trivial integration of rust libraries into haskell applications. The code can be found in rust.nix.\n"});index.add({'id':6,'href':'/tools/docs/unboxed-tuples/','title':"Unboxed Tuples",'content':""});index.add({'id':7,'href':'/tools/docs/windows-cross-compilation/','title':"Windows Cross Compilation",'content':"Windows Cross Compilation Building applications on windows in Continuous Integration (CI) can be a rather tricky endeavour. Especially if all the existing CI infrastructure is primarily linux based. For macOS, we can mostly treat it like linux, mostly. For Windows, not so much. Furthermore obtaining server licenses and the additional costs associated with windows servers can be annoying to manage, especially if only required in short burts. Thus it is qutie attractive to build Windows applications on non-windows machines.\nWe have extended GHC to be able to properly cross compile all of IOHKs haskell sourcecode to Windows.\n"});index.add({'id':8,'href':'/tools/docs/','title':"Docs",'content':""});})();